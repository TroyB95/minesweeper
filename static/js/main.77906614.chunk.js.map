{"version":3,"sources":["Assets/bomb.svg","Assets/skull.svg","globalState/types.tsx","globalState/index.tsx","gameFunctions/gridGeneration.tsx","gameFunctions/gridHelpers.tsx","App.styled.tsx","Components/Button/Button.styled.tsx","Components/HeaderBar/index.tsx","Components/StartScreen/StartScreen.styled.tsx","Components/StartScreen/index.tsx","Components/InformationModal/InformationModal.styled.tsx","Components/InformationModal/index.tsx","Components/GridSquare/GridSquare.styled.tsx","Components/GridSquare/index.tsx","Components/GridRow/index.tsx","App.tsx","serviceWorker.js","Theme.tsx","index.js"],"names":["module","exports","initialState","tilesTurntCounter","flaggedLocations","Set","gameOptions","bombCount","gridSize","difficulty","roundLevel","store","createContext","Provider","StateProvider","children","useReducer","state","action","type","types","payload","Error","dispatch","value","create2DArray","rows","arr","i","generateCoordinate","gridDimension","Math","round","random","setBasicGrid","width","gridArr","filledGridArr","y","x","generateGrid","bombs","bombCoordArr","array2","bombsCoordArr","length","coordArr","toString","includes","push","generateBombs","forEach","locationArr","fullGrid","incrementAroundBombs","mutateTrackingArray","trackingArr","tileTrackingArr","PageContainer","styled","div","theme","colour","background","GridContainer","StyledButton","button","font","family","mainFont","tileTurnt","props","fontSize","height","Header","RoundCounter","h3","medium","HeaderBar","resetGame","useContext","onClick","StartScreenModalBackground","StartScreenModal","tileUnturnt","secondaryFont","OptionsForm","form","large","OptionsInputDiv","small","StyledTitle","p","StartScreen","setStartTime","setOptionsSubmitted","useState","gridOptions","setGridOptions","optionsView","setOptionsView","globalState","handleOnChange","e","currentTarget","onSubmit","preventDefault","Date","now","handleSubmit","id","name","onChange","htmlFor","min","max","Number","target","disabled","view","submitButtonDisabled","ModalBackground","ModalBody","InformationModal","resetForNextLevel","playTime","newBombCount","newGridSize","goNextLevel","GridSection","bold","backgroundColour","pointer","hoverColour","TileImage","img","GridSquare","alt","src","BombSVG","FlagSVG","this","onContextMenu","renderType","showImage","Component","GridRowContainer","GridRow","nextProps","nextState","console","log","App","themeContext","ThemeContext","generatedGrid","setGrid","optionsSubmitted","tileTrackingArray","setTileTrackingArray","maxTilesTurnt","setMaxTilesTurnt","setGameReset","gameState","setGameState","startTime","setPlayTime","checkLocations","click","has","deleteUpdatedSet","delete","addUpdateSet","add","handleClick","gridSquare","flippedTilesData","modifiedTrackingArr","numberOfTilesTurnt","clickedSquare","recurseGrid","currentSquare","newY","newX","flipBlankTiles","setTimeout","renderSquare","useEffect","tilesTurntCount","size","checkIfWon","map","row","key","uniqid","handleRightClick","darkHover","Boolean","window","location","hostname","match","Theme","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.77906614.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bomb.4f9c4c8c.svg\";","module.exports = __webpack_public_path__ + \"static/media/skull.15d26c36.svg\";","// Tiles Turnt Count\nconst INCREMENT_COUNT = \"INCREMENT_COUNT\";\nconst RESET_COUNT = \"RESET_COUNT\";\n\n// flaggedLocations\nconst UPDATE_FLAGGED_LOCATIONS = \"UPDATE_FLAGGED_LOCATIONS\";\nconst RESET_FLAGGED_LOCATIONS = \"RESET_FLAGGED_LOCATIONS\";\n\n// gameOptions\nconst UPDATE_GRID_OPTIONS = \"UPDATE_GRID_OPTIONS\";\nconst RESET_GRID_OPTIONS = \"RESET_GRID_OPTIONS\";\n\n// roundLevel\nconst INCREMENT_ROUND_LEVEL = \"INCREMENT_ROUND_LEVEL\";\nconst RESET_ROUND_LEVEL = \"RESET_ROUND_LEVEL\";\n\nexport default {\n  INCREMENT_COUNT,\n  RESET_COUNT,\n  UPDATE_FLAGGED_LOCATIONS,\n  RESET_FLAGGED_LOCATIONS,\n  UPDATE_GRID_OPTIONS,\n  RESET_GRID_OPTIONS,\n  INCREMENT_ROUND_LEVEL,\n  RESET_ROUND_LEVEL,\n};\n\nexport interface IActionType {\n  type: typeof INCREMENT_COUNT;\n  payload: any;\n}\n","import React, { createContext, useReducer, FunctionComponent } from \"react\";\n\nimport types, { IActionType } from \"./types\";\n\nconst initialState = {\n  tilesTurntCounter: 0,\n  flaggedLocations: new Set(),\n  gameOptions: { bombCount: 0, gridSize: 0, difficulty: \"\" },\n  roundLevel: 1,\n};\n\ninterface IContextProps {\n  state: StateType;\n  dispatch: React.Dispatch<any>;\n}\n\ntype StateType = {\n  tilesTurntCounter: number;\n  flaggedLocations: Set<string>;\n  gameOptions: { gridSize: number; bombCount: number; difficulty: string };\n  roundLevel: number;\n};\n\nconst store = createContext({} as IContextProps);\nconst { Provider } = store;\n\nconst StateProvider: FunctionComponent = ({ children }) => {\n  const [state, dispatch] = useReducer(\n    (state: StateType, action: IActionType) => {\n      switch (action.type) {\n        case types.INCREMENT_COUNT:\n          return {\n            ...state,\n            tilesTurntCounter:\n              state.tilesTurntCounter + (action.payload ? action.payload : 1),\n          };\n        case types.RESET_COUNT:\n          return {\n            ...state,\n            tilesTurntCounter: 0,\n          };\n        case types.UPDATE_FLAGGED_LOCATIONS:\n          return {\n            ...state,\n            flaggedLocations: action.payload,\n          };\n        case types.RESET_FLAGGED_LOCATIONS:\n          return {\n            ...state,\n            flaggedLocations: new Set(),\n          };\n        case types.UPDATE_GRID_OPTIONS:\n          return {\n            ...state,\n            gameOptions: { ...state.gameOptions, ...action.payload },\n          };\n        case types.RESET_GRID_OPTIONS:\n          return {\n            ...state,\n            gameOptions: { bombCount: 0, gridSize: 0, difficulty: \"\" },\n          };\n        case types.INCREMENT_ROUND_LEVEL:\n          return {\n            ...state,\n            roundLevel: state.roundLevel += 1,\n          };\n        case types.RESET_ROUND_LEVEL:\n          return {\n            ...state,\n            roundLevel: 1,\n          };\n\n        default:\n          throw new Error();\n      }\n    },\n    initialState\n  );\n\n  return <Provider value={{ state, dispatch }}>{children}</Provider>;\n};\n\nexport { store, StateProvider };\n","/**\n * Creates a 2d array.\n * @param {number} rows - How many nested arrays.\n * @returns {Array}\n */\nexport function create2DArray(rows: number) {\n  let arr = [];\n  for (let i = 0; i < rows; i++) {\n    arr[i] = [];\n  }\n  return arr;\n}\n\n/**\n * Generates number between 0 and max width of grid.\n * @param {Number} gridDimensions - Max width of grid.\n * @returns {Number}\n */\nexport function generateCoordinate(gridDimension: number) {\n  return Math.round(Math.random() * (gridDimension - 1));\n}\n\n/**\n * Checks coordinates are unique and have not already been created.\n * @param {Array} array1 - Store of the coordinates.\n * @param {Array} array2 - New generated arr of coordinates.\n * @returns {Boolean}\n */\nexport function compareCoords(\n  bombCoordArr: Array<Array<number>>,\n  array2: Array<number>\n) {\n  if (!array2) return false;\n\n  if (bombCoordArr.toString().includes(array2.toString())) {\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Generates array of bomb coordinates X/Y.\n * @param {Number} width - How many squares wide.\n * @param {Number} Bombs - Number of bombs.\n * @returns {Array}\n */\nexport function generateBombs(width: number, bombs: number) {\n  let bombsCoordArr: Array<Array<number>> = [];\n\n  while (bombsCoordArr.length < bombs) {\n    let coordArr: Array<number> = [\n      generateCoordinate(width),\n      generateCoordinate(width)\n    ];\n    if (!compareCoords(bombsCoordArr, coordArr)) {\n      bombsCoordArr.push(coordArr);\n    }\n  }\n  return bombsCoordArr;\n}\n\n/**\n * Fills out the nested Arrays representing the grid with the value provided.\n * @param {Number} width - How many squares wide.\n * @param {Array} gridArr - The empty nested grids.\n * @param {Number | String | Boolean} value - The value to fill the arrays with.\n * @returns {Array}\n */\nexport function setBasicGrid(\n  width: number,\n  gridArr: Array<Array<any>>,\n  value = 0 as any\n) {\n  let filledGridArr = [...gridArr];\n  for (let y = 0; y < width; y++) {\n    for (let x = 0; x < width; x++) {\n      filledGridArr[y][x] = value;\n    }\n  }\n  return filledGridArr;\n}\n\n/**\n * Plots the bomb locations in the grid.\n * @param {Number} width - How many squares wide.\n * @param {Number} bombs - The number of bombs to include.\n * @returns {Array}\n */\nexport function generateGrid(width: number, bombs: number) {\n  let gridArr = setBasicGrid(width, create2DArray(width));\n  const bombsCoordArr = generateBombs(width, bombs);\n\n  (function plotBombs() {\n    bombsCoordArr.forEach(locationArr => {\n      gridArr[locationArr[0]][locationArr[1]] = true;\n    });\n  })();\n\n  return incrementAroundBombs(width, gridArr);\n}\n\n/**\n * Increment the squares around the bombs to show how many bombs are close.\n * @param {Number} width - How many squares wide.\n * @param {Array} gridArr - The nested grid array.\n * @returns {Array}\n */\nexport function incrementAroundBombs(\n  width: number,\n  gridArr: Array<Array<any>>\n) {\n  let fullGrid = [...gridArr];\n  for (let y = 0; y < width; y++) {\n    for (let x = 0; x < width; x++) {\n      // If bomb increment all coords around it\n      if (fullGrid[y][x] === true) {\n        // north\n        if (y + 1 !== width && fullGrid[y + 1][x] !== true) {\n          fullGrid[y + 1][x] += 1;\n        }\n        // north east\n        if (\n          y + 1 !== width &&\n          x + 1 !== width &&\n          fullGrid[y + 1][x + 1] !== true\n        ) {\n          fullGrid[y + 1][x + 1] += 1;\n        }\n        // east\n        if (x + 1 !== width && fullGrid[y][x + 1] !== true) {\n          fullGrid[y][x + 1] += 1;\n        }\n        // south east\n        if (\n          y - 1 !== -1 &&\n          x + 1 !== width &&\n          fullGrid[y - 1][x + 1] !== true\n        ) {\n          fullGrid[y - 1][x + 1] += 1;\n        }\n        // south\n        if (y - 1 !== -1 && fullGrid[y - 1][x] !== true) {\n          fullGrid[y - 1][x] += 1;\n        }\n        // south west\n        if (y - 1 !== -1 && x - 1 !== -1 && fullGrid[y - 1][x - 1] !== true) {\n          fullGrid[y - 1][x - 1] += 1;\n        }\n        // west\n        if (x - 1 !== -1 && fullGrid[y][x - 1] !== true) {\n          fullGrid[y][x - 1] += 1;\n        }\n        // north west\n        if (\n          y + 1 !== width &&\n          x - 1 !== -1 &&\n          fullGrid[y + 1][x - 1] !== true\n        ) {\n          fullGrid[y + 1][x - 1] += 1;\n        }\n      }\n    }\n  }\n  return fullGrid;\n}\n","/**\n * Check if value is a bomb.\n * @param {Boolean} value - The value of the square.\n * @param {Object} e - The click event.\n */\nexport function checkForBomb(value: boolean | number | string) {\n  if (value === true) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * Mutate the array with updates from click events etc.\n * @param {Number} x - Value of x coordinate.\n * @param {Number} y - Value of y coordinate.\n * @param {Array} trackingArr - gridArr with filled info.\n * @param {String | Number | Boolean} value - The value to update the tracking array with.\n * @return {Array} Returns the new mutated array\n */\nexport function mutateTrackingArray(\n  y: number,\n  x: number,\n  trackingArr: Array<any>,\n  value: string | number | boolean\n) {\n  let tileTrackingArr: Array<any> = [...trackingArr];\n  tileTrackingArr[y][x] = value;\n\n  return tileTrackingArr;\n}\n\n/**\n * Check if the player has won the game.\n * @param {Number} tilesTurntCount - Number of tiles been clicked on.\n * @param {Number} maxTilesTurnt - Count of maximum tiles minus bombs.\n * @param {Set} flaggedLocations - Set with coordinates of flagged tiles.\n * @param {Number} bombCount - Number of bombs in the current game.\n */\nexport function checkIfWon(\n  tilesTurntCount: number,\n  maxTilesTurnt: number,\n  flaggedLocations: Set<string>,\n  bombCount: number\n) {\n  if (tilesTurntCount >= maxTilesTurnt) {\n    if (flaggedLocations.size === bombCount) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Flips over all the empty tiles after a click.\n * @param {Number} x - x coordinate in array.\n * @param {Number} y - y coordinate in array.\n * @param {Array} trackingArr - Array which tracks all the tiles which have been flipped.\n * @param {Array} generatedGrid - The filed array for the game.\n * @param {Number} width - Width of game board.\n *\n */\nexport function flipBlankTiles(\n  y: number,\n  x: number,\n  trackingArr: Array<any>,\n  generatedGrid: Array<Array<any>>,\n  width: number\n) {\n  let modifiedTrackingArr = [...trackingArr];\n  let numberOfTilesTurnt = 0;\n\n  let clickedSquare = generatedGrid[y][x];\n\n  if (clickedSquare > 0) {\n    modifiedTrackingArr[y][x] = true;\n    numberOfTilesTurnt++;\n  }\n\n  if (clickedSquare === 0) {\n    recurseGrid(y, x);\n  }\n\n  function recurseGrid(y: number, x: number) {\n    let currentSquare = generatedGrid[y][x];\n\n    if (currentSquare === 0) {\n      modifiedTrackingArr[y][x] = true;\n      numberOfTilesTurnt += 1;\n\n      // check tile to north\n      if (y + 1 !== width) {\n        let newY = y + 1;\n        if (modifiedTrackingArr[newY][x] !== true) {\n          recurseGrid(newY, x);\n        }\n      }\n\n      // check tile to north east\n      if (y + 1 !== width && x + 1 !== width) {\n        let newY = y + 1;\n        let newX = x + 1;\n        if (modifiedTrackingArr[newY][newX] !== true) {\n          recurseGrid(newY, newX);\n        }\n      }\n\n      // check tile to east\n      if (x + 1 !== width) {\n        let newX = x + 1;\n        if (modifiedTrackingArr[y][newX] !== true) {\n          recurseGrid(y, newX);\n        }\n      }\n\n      // check tile to south east\n      if (y - 1 >= 0 && x + 1 !== width) {\n        let newY = y - 1;\n        let newX = x + 1;\n        if (modifiedTrackingArr[newY][newX] !== true) {\n          recurseGrid(newY, newX);\n        }\n      }\n\n      // check tile to south\n      if (y - 1 >= 0) {\n        let newY = y - 1;\n        if (modifiedTrackingArr[newY][x] !== true) {\n          recurseGrid(newY, x);\n        }\n      }\n\n      // check tile to south west\n      if (y - 1 >= 0 && x - 1 >= 0) {\n        let newY = y - 1;\n        let newX = x - 1;\n        if (modifiedTrackingArr[newY][newX] !== true) {\n          recurseGrid(newY, newX);\n        }\n      }\n\n      // check tile to west\n      if (x - 1 >= 0) {\n        let newX = x - 1;\n        if (modifiedTrackingArr[y][newX] !== true) {\n          recurseGrid(y, newX);\n        }\n      }\n\n      // check tile to north west\n      if (y + 1 !== width && x - 1 >= 0) {\n        let newY = y + 1;\n        let newX = x - 1;\n        if (modifiedTrackingArr[newY][newX] !== true) {\n          recurseGrid(newY, newX);\n        }\n      }\n    }\n    if (currentSquare > 0) {\n      modifiedTrackingArr[y][x] = true;\n      numberOfTilesTurnt += 1;\n      return;\n    }\n  }\n\n  return { modifiedTrackingArr, numberOfTilesTurnt };\n}\n","import styled from \"styled-components\";\n\nexport const PageContainer = styled.div`\n  width: 100vw;\n  height: 100vh;\n\n  background: ${({ theme: { colour } }) => colour.background};\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const GridContainer = styled.div`\n  width: 80%;\n  height: 80%;\n`;\n","import styled from \"styled-components\";\n\nconst StyledButton = styled.button<{\n  fontSize?: string;\n  width?: string;\n  height?: string;\n}>`\n  ${({ theme: { font, colour } }) => `\n    font-family: ${font.family};\n    background: ${colour.mainFont};\n   \n  text-transform: uppercase;\n  text-decoration: none;\n\n  cursor: pointer;\n\n  color: black;\n  padding: 4px;\n  border: 1px solid ${colour.background};\n  display: inline-block;\n\n  transition: all 0.4s ease 0s;\n\n  :hover {\n    background: ${colour.tileTurnt};\n    border-color: ${colour.tileTurnt};\n    transition: all 0.4s ease 0s;\n  }\n   `}\n\n  font-size: ${(props) => (props.fontSize ? props.fontSize : \"12px\")};\n  width: ${(props) => (props.width ? props.width : \"\")};\n  height: ${(props) => (props.height ? props.height : \"\")};\n\n`;\n\nexport { StyledButton };\n","import React, { useContext } from \"react\";\nimport styled from \"styled-components\";\n\nimport { store } from \"../../globalState\";\n\nimport TimerBar from \"../TimerBar\";\nimport { StyledButton } from \"../Button/Button.styled\";\n\nconst Header = styled.div`\n  width: 80%;\n  height: 5%;\n\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst RoundCounter = styled.h3`\n  ${({ theme: { colour, font } }) => `\n    color: ${colour.mainFont};\n    font-size: ${font.medium};\n`}\n  padding-left: 3px;\n`;\n\ninterface IProps {\n  resetGame: Function;\n}\nfunction HeaderBar({ resetGame }: IProps) {\n  const globalState = useContext(store);\n  const { roundLevel } = globalState.state;\n\n  return (\n    <Header>\n      {/* <TimerBar /> */}\n      <RoundCounter>Level: {roundLevel}</RoundCounter>\n      <StyledButton onClick={() => resetGame()}>Restart</StyledButton>\n    </Header>\n  );\n}\n\nexport default HeaderBar;\n","import styled from \"styled-components\";\n\nexport const StartScreenModalBackground = styled.div`\n  ${({ theme: { colour } }) => `\n  background: ${colour.background};\n`}\n\n  width: 100%;\n  height: 100%;\n\n  position: absolute;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const StartScreenModal = styled.div`\n  ${({ theme: { colour } }) => `\n    background: ${colour.tileUnturnt};\n    color: ${colour.secondaryFont};\n  `}\n\n  width: 50%;\n  height: 50%;\n\n  box-shadow: 10px 10px 14px -2px rgba(0, 0, 0, 0.75);\n  border-radius: 20px;\n\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const OptionsForm = styled.form`\n  ${({ theme: { font } }) => `\n    font-size: ${font.medium};\n  `}\n\n  width: 80%;\n  height: 80%;\n\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-around;\n\n  input[type=\"submit\"] {\n    ${({ theme: { colour, font } }) => `\n    background: ${colour.mainFont};\n    font-family: ${font.family};\n    font-size: ${font.large};\n\n    :hover:enabled {\n      background: ${colour.tileTurnt};\n      cursor: pointer;\n    }\n  `}\n\n    border: none;\n    border-radius: 50%;\n\n    padding: 12px 24px;\n  }\n`;\n\nexport const OptionsInputDiv = styled.div`\n  ${({ theme: { colour, font } }) => `\n    border: 1px dashed ${colour.mainFont};\n     padding-bottom: ${font.small};\n    `}\n\n  width: 100%;\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  align-items: center;\n\n  input[type=\"radio\"] {\n    :hover {\n      cursor: pointer;\n    }\n\n    transform: scale(1.4);\n    margin-bottom: 8px;\n  }\n\n  label {\n    padding-left: 0.25em;\n  }\n\n  div {\n    flex: 1;\n\n    text-align: center;\n\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n  }\n`;\n\nexport const StyledTitle = styled.p`\n  ${({ theme: { font } }) => `\n    padding-top: ${font.small};\n  `}\n\n  width: 100%;\n\n  text-align: center;\n\n  margin: 0;\n  margin-bottom: 18px;\n`;\n","import React, { useContext, useState, ChangeEvent } from \"react\";\n\nimport types from \"../../globalState/types\";\nimport { store } from \"../../globalState\";\n\nimport {\n  StartScreenModal,\n  StartScreenModalBackground,\n  OptionsForm,\n  OptionsInputDiv,\n  StyledTitle,\n} from \"./StartScreen.styled\";\n\nimport { StyledButton } from \"../Button/Button.styled\";\n\ntype StartScreenProps = {\n  setStartTime: Function;\n  setOptionsSubmitted: Function;\n};\n\ntype GridOptions = {\n  gridSize: number;\n  bombCount: number;\n  difficulty: string;\n};\n\nfunction StartScreen({ setStartTime, setOptionsSubmitted }: StartScreenProps) {\n  const [gridOptions, setGridOptions] = useState({\n    gridSize: 0,\n    bombCount: 0,\n    difficulty: \"\",\n  });\n  const [optionsView, setOptionsView] = useState(\"basic\");\n\n  const globalState = useContext(store);\n  const { dispatch } = globalState;\n\n  const {\n    state: {\n      gameOptions: { difficulty },\n    },\n  } = globalState;\n\n  const { gridSize, bombCount } = gridOptions;\n\n  function handleSubmit(\n    e: React.FormEvent<HTMLFormElement>,\n    optionsView: string,\n    difficulty: string\n  ) {\n    if (optionsView === \"basic\") {\n      e.preventDefault();\n      if (difficulty === \"easy\") {\n        dispatch({\n          type: types.UPDATE_GRID_OPTIONS,\n          payload: { gridSize: 10, bombCount: 12 },\n        });\n      }\n      if (difficulty === \"medium\") {\n        dispatch({\n          type: types.UPDATE_GRID_OPTIONS,\n          payload: { gridSize: 15, bombCount: 40 },\n        });\n      }\n      if (difficulty === \"hard\") {\n        dispatch({\n          type: types.UPDATE_GRID_OPTIONS,\n          payload: { gridSize: 25, bombCount: 100 },\n        });\n      }\n      setStartTime(Date.now());\n      setOptionsSubmitted(true);\n      return;\n    }\n\n    if (optionsView === \"advanced\") {\n      e.preventDefault();\n      dispatch({ type: types.UPDATE_GRID_OPTIONS, payload: gridOptions });\n      setStartTime(Date.now());\n      setOptionsSubmitted(true);\n    }\n  }\n\n  function handleOnChange(e: ChangeEvent<HTMLInputElement>) {\n    if (!e) {\n      return;\n    }\n    dispatch({\n      type: types.UPDATE_GRID_OPTIONS,\n      payload: { difficulty: e.currentTarget.value },\n    });\n  }\n\n  function submitButtonDisabled(\n    view: string,\n    difficulty: string,\n    gridOptions: GridOptions\n  ) {\n    if (view === \"basic\") {\n      return difficulty === \"\";\n    }\n    if (view === \"advanced\") {\n      return gridOptions.gridSize === 0 || gridOptions.bombCount === 0;\n    }\n    return true;\n  }\n  return (\n    <StartScreenModalBackground>\n      <StartScreenModal>\n        <OptionsForm onSubmit={(e) => handleSubmit(e, optionsView, difficulty)}>\n          {optionsView === \"basic\" && (\n            <OptionsInputDiv>\n              <StyledTitle>Please choose difficulty :</StyledTitle>\n              <div>\n                <input\n                  type=\"radio\"\n                  id=\"easy\"\n                  name=\"difficulty\"\n                  value=\"easy\"\n                  onChange={handleOnChange}\n                />\n                <label htmlFor=\"easy\">Easy</label>\n              </div>\n              <div>\n                <input\n                  type=\"radio\"\n                  id=\"medium\"\n                  name=\"difficulty\"\n                  value=\"medium\"\n                  onChange={handleOnChange}\n                />\n                <label htmlFor=\"medium\">Medium</label>\n              </div>\n              <div>\n                <input\n                  type=\"radio\"\n                  id=\"hard\"\n                  name=\"difficulty\"\n                  value=\"hard\"\n                  onChange={handleOnChange}\n                />\n                <label htmlFor=\"hard\">Hard</label>\n              </div>\n            </OptionsInputDiv>\n          )}\n          {optionsView === \"advanced\" && (\n            <>\n              <OptionsInputDiv>\n                <label>Grid size: </label>\n                <input\n                  type=\"number\"\n                  min=\"10\"\n                  max=\"50\"\n                  value={gridSize}\n                  onChange={(e) => {\n                    setGridOptions({\n                      ...gridOptions,\n                      gridSize: Number(e.target.value),\n                    });\n                  }}\n                ></input>\n              </OptionsInputDiv>\n              <OptionsInputDiv>\n                <label>Number of bombs: </label>\n                <input\n                  disabled={gridSize > 0 ? false : true}\n                  type=\"number\"\n                  min={Math.round(gridSize * gridSize * 0.1)}\n                  max={Math.round(gridSize * gridSize * 0.5)}\n                  value={bombCount}\n                  onChange={(e) => {\n                    setGridOptions({\n                      ...gridOptions,\n                      bombCount: Number(e.target.value),\n                    });\n                  }}\n                ></input>\n              </OptionsInputDiv>\n            </>\n          )}\n          <input\n            type=\"submit\"\n            value=\"START\"\n            disabled={submitButtonDisabled(\n              optionsView,\n              difficulty,\n              gridOptions\n            )}\n          />\n        </OptionsForm>\n        <StyledButton\n          onClick={() =>\n            setOptionsView(optionsView === \"basic\" ? \"advanced\" : \"basic\")\n          }\n        >\n          {optionsView === \"basic\" ? \"Advanced\" : \"Basic\"}\n        </StyledButton>\n      </StartScreenModal>\n    </StartScreenModalBackground>\n  );\n}\n\nexport default StartScreen;\n","import styled from \"styled-components\";\n\nexport const ModalBackground = styled.div`\n  width: 100%;\n  height: 100%;\n\n  background-color: rgba(0, 0, 0, 0.8);\n\n  position: absolute;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\nexport const ModalBody = styled.div`\n  width: 50%;\n  height: 50%;\n\n  background: grey;\n\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  text-align: center;\n\n  padding-left: 15%;\n  padding-right: 15%;\n`;\n","import React, { useContext } from \"react\";\nimport { store } from \"../../globalState\";\nimport types from \"../../globalState/types\";\n\nimport { ModalBackground, ModalBody } from \"./InformationModal.styled\";\nimport { StyledButton } from \"../Button/Button.styled\";\n\ntype ModalProps = {\n  resetGame: Function;\n  resetForNextLevel: Function;\n  type: string;\n  playTime: number;\n  bombCount?: number;\n  gridSize?: number;\n};\n\nconst InformationModal = ({\n  resetGame,\n  resetForNextLevel,\n  type,\n  playTime,\n}: ModalProps) => {\n  const globalState = useContext(store);\n  const { dispatch } = globalState;\n\n  const {\n    state: {\n      gameOptions: { bombCount, gridSize, difficulty },\n      roundLevel,\n    },\n  } = globalState;\n\n  const goNextLevel = (\n    bombCount: number,\n    gridSize: number,\n    difficulty: string\n  ) => {\n    let newBombCount;\n    let newGridSize;\n\n    resetForNextLevel();\n    switch (difficulty) {\n      case \"easy\":\n        newBombCount = bombCount + 5;\n        newGridSize = gridSize + 2;\n        break;\n      case \"medium\":\n        newBombCount = bombCount + 10;\n        newGridSize = gridSize + 4;\n        break;\n      case \"hard\":\n        newBombCount = bombCount + 15;\n        newGridSize = gridSize + 6;\n        break;\n      default:\n        break;\n    }\n\n    dispatch({\n      type: types.UPDATE_GRID_OPTIONS,\n      payload: { gridSize: newGridSize, bombCount: newBombCount },\n    });\n  };\n  return (\n    <ModalBackground>\n      <ModalBody>\n        {type === \"win\" && (\n          <>\n            <h1>CONGRATS YOU HAVE BEAT ROUND LEVEL {roundLevel}</h1>\n            <h3>Total time played: {playTime} Seconds</h3>\n            <StyledButton\n              fontSize=\"18px\"\n              width=\"144px\"\n              height=\"42px\"\n              onClick={() => goNextLevel(bombCount, gridSize, difficulty)}\n            >\n              Next Level\n            </StyledButton>\n            <br />\n            <br />\n            <StyledButton\n              fontSize=\"18px\"\n              width=\"144px\"\n              height=\"42px\"\n              onClick={() => resetGame()}\n            >\n              Restart\n            </StyledButton>\n          </>\n        )}\n        {type === \"loss\" && (\n          <>\n            <h1>\n              YOU HAVE LOST AT <br />\n              ROUND LEVEL {roundLevel}!\n            </h1>\n            <h3>Total time played: {playTime} Seconds</h3>\n            <StyledButton\n              fontSize=\"18px\"\n              width=\"144px\"\n              height=\"42px\"\n              onClick={() => resetGame()}\n            >\n              Play Again\n            </StyledButton>\n          </>\n        )}\n      </ModalBody>\n    </ModalBackground>\n  );\n};\n\nexport default InformationModal;\n","import styled from \"styled-components\";\n\nexport const GridSection = styled.div<{\n  backgroundColour: string;\n  pointer: string;\n  hoverColour: string;\n  width: number;\n}>`\n  ${({ theme: { colour, font } }) => `\n  font-family: ${font.bold};\n  border-right:3px solid ${colour.background}; \n`}\n\n  width: ${(props) => 100 / props.width + \"%\"};\n  height: 100%;\n\n  flex-grow: 1;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  background: ${(props) => props.backgroundColour};\n\n  :hover {\n    cursor: ${(props) => props.pointer};\n    background: ${(props) => props.hoverColour};\n  }\n`;\n\nexport const TileImage = styled.img`\n  width: 80%;\n  height: 80%;\n`;\n","import React, { Component } from \"react\";\n\nimport { TileImage, GridSection } from \"./GridSquare.styled\";\nimport BombSVG from \"../../Assets/bomb.svg\";\nimport FlagSVG from \"../../Assets/skull.svg\";\n\ninterface Props {\n  onClick: any;\n  onContextMenu: any;\n  width: number;\n  backgroundColour: string;\n  hoverColour: string;\n  pointer: string;\n  renderType: any;\n}\n\ninterface State {}\n\nclass GridSquare extends Component<Props, State> {\n  showImage(type: string | number) {\n    if (type === \"bomb\") {\n      return <TileImage alt=\"Dynamite sticks with timer\" src={BombSVG} />;\n    }\n    if (type === \"flag\") {\n      return (\n        <TileImage alt=\"Black flag with skull and crosbones on\" src={FlagSVG} />\n      );\n    }\n    return type;\n  }\n\n  render() {\n    const {\n      onClick,\n      onContextMenu,\n      width,\n      backgroundColour,\n      hoverColour,\n      pointer,\n      renderType,\n    } = this.props;\n\n    return (\n      <GridSection\n        backgroundColour={backgroundColour}\n        hoverColour={hoverColour}\n        pointer={pointer}\n        width={width}\n        onClick={onClick}\n        onContextMenu={onContextMenu}\n      >\n        {this.showImage(renderType)}\n      </GridSection>\n    );\n  }\n}\n\nexport default GridSquare;\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\n\nconst GridRowContainer = styled.div<{ height: number }>`\n  display: flex;\n\n  width: 100%;\n  height: ${(props) => 100 / props.height + \"%\"};\n\n  border-left: ${({ theme: { colour } }) => `3px solid ${colour.background}`};\n  border-top: ${({ theme: { colour } }) => `3px solid ${colour.background}`};\n\n  &:last-of-type {\n    border-bottom: ${({ theme: { colour } }) =>\n      `3px solid ${colour.background}`};\n  }\n`;\n\ninterface Props {\n  height: number;\n  children: any;\n}\n\nclass GridRow extends Component<Props> {\n  shouldComponentUpdate(nextProps: any, nextState: any) {\n    console.log(nextProps, nextState);\n    console.log(this.props, this.state);\n\n    return false;\n  }\n\n  render() {\n    const { height, children } = this.props;\n\n    return <GridRowContainer height={height}>{children}</GridRowContainer>;\n  }\n}\n\nexport default GridRow;\n","import React, { useEffect, useState, useContext } from \"react\";\nimport uniqid from \"uniqid\";\nimport { store } from \"./globalState\";\nimport types from \"./globalState/types\";\n\nimport { ThemeContext } from \"styled-components\";\n\nimport {\n  generateGrid,\n  create2DArray,\n  setBasicGrid,\n} from \"./gameFunctions/gridGeneration\";\nimport {\n  checkForBomb,\n  mutateTrackingArray,\n  checkIfWon,\n  flipBlankTiles,\n} from \"./gameFunctions/gridHelpers\";\n\nimport { GridContainer, PageContainer } from \"./App.styled\";\n\nimport HeaderBar from \"./Components/HeaderBar\";\nimport StartScreen from \"./Components/StartScreen\";\nimport InformationModal from \"./Components/InformationModal\";\nimport GridSquare from \"./Components/GridSquare\";\nimport GridRow from \"./Components/GridRow\";\n\nfunction App() {\n  const themeContext = useContext(ThemeContext);\n  const globalState = useContext(store);\n  const { dispatch } = globalState;\n  const {\n    tilesTurntCounter,\n    flaggedLocations,\n    gameOptions: { gridSize, bombCount },\n    roundLevel,\n  } = globalState.state;\n\n  const [generatedGrid, setGrid] = useState(\n    [] as Array<Array<number | string | boolean>>\n  );\n  const [optionsSubmitted, setOptionsSubmitted] = useState(false as boolean);\n  const [tileTrackingArray, setTileTrackingArray] = useState([] as Array<any>);\n  const [maxTilesTurnt, setMaxTilesTurnt] = useState(0);\n  const [gameReset, setGameReset] = useState(false);\n  const [gameState, setGameState] = useState(\"\");\n  const [startTime, setStartTime] = useState(0);\n  const [playTime, setPlayTime] = useState(0);\n  useEffect(() => {\n    setGrid(generateGrid(gridSize, bombCount));\n    setTileTrackingArray(\n      setBasicGrid(gridSize, create2DArray(gridSize), false)\n    );\n    setMaxTilesTurnt(gridSize * gridSize - bombCount);\n\n    if (gameState === \"win\") {\n      setGameState(\"\");\n    }\n  }, [bombCount, gridSize, optionsSubmitted]);\n\n  useEffect(() => {\n    if (\n      optionsSubmitted &&\n      checkIfWon(tilesTurntCounter, maxTilesTurnt, flaggedLocations, bombCount)\n    ) {\n      const playTime = Math.round((Date.now() - startTime) / 1000);\n      setPlayTime(playTime);\n      setGameState(\"win\");\n    }\n  }, [\n    bombCount,\n    flaggedLocations,\n    maxTilesTurnt,\n    optionsSubmitted,\n    tilesTurntCounter,\n    startTime,\n  ]);\n\n  function checkLocations(y: number, x: number, click: string) {\n    if (flaggedLocations && flaggedLocations.has(`${y},${x}`)) {\n      let deleteUpdatedSet = new Set(flaggedLocations);\n      deleteUpdatedSet.delete(`${y},${x}`);\n      return dispatch({\n        type: types.UPDATE_FLAGGED_LOCATIONS,\n        payload: deleteUpdatedSet,\n      });\n    }\n    if (click === \"right\") {\n      let addUpdateSet = new Set(flaggedLocations);\n      addUpdateSet.add(`${y},${x}`);\n      return dispatch({\n        type: types.UPDATE_FLAGGED_LOCATIONS,\n        payload: addUpdateSet,\n      });\n    }\n  }\n\n  function handleClick(\n    e: React.MouseEvent<HTMLElement>,\n    y: number,\n    x: number,\n    gridSquare: boolean | string | number\n  ) {\n    if (tileTrackingArray[y][x] === true) {\n      return;\n    }\n    checkLocations(y, x, \"left\");\n    let flippedTilesData = flipBlankTiles(\n      y,\n      x,\n      tileTrackingArray,\n      generatedGrid,\n      gridSize\n    );\n    if (checkForBomb(gridSquare)) {\n      const playTime = Math.round((Date.now() - startTime) / 1000);\n      setPlayTime(playTime);\n      setTimeout(() => {\n        setGameState(\"loss\");\n      }, 500);\n    }\n    setTileTrackingArray(flippedTilesData.modifiedTrackingArr);\n    dispatch({\n      type: types.INCREMENT_COUNT,\n      payload: flippedTilesData.numberOfTilesTurnt,\n    });\n  }\n\n  function handleRightClick(\n    e: React.MouseEvent<HTMLElement>,\n    y: number,\n    x: number\n  ) {\n    e.preventDefault();\n    if (tileTrackingArray[y][x] === \"flag\") {\n      setTileTrackingArray(mutateTrackingArray(y, x, tileTrackingArray, false));\n      checkLocations(y, x, \"right\");\n      return;\n    }\n\n    if (tileTrackingArray[y][x] !== true) {\n      setTileTrackingArray(\n        mutateTrackingArray(y, x, tileTrackingArray, \"flag\")\n      );\n      checkLocations(y, x, \"right\");\n      return;\n    }\n  }\n\n  function resetGame() {\n    dispatch({ type: types.RESET_COUNT });\n    dispatch({ type: types.RESET_FLAGGED_LOCATIONS });\n    dispatch({ type: types.RESET_GRID_OPTIONS });\n    dispatch({ type: types.RESET_ROUND_LEVEL });\n    setGrid([]);\n    setOptionsSubmitted(false);\n    setTileTrackingArray([]);\n    setMaxTilesTurnt(0);\n    setGameState(\"\");\n    setGameReset(false);\n  }\n\n  function resetForNextLevel() {\n    dispatch({ type: types.RESET_COUNT });\n    dispatch({ type: types.RESET_FLAGGED_LOCATIONS });\n    dispatch({ type: types.INCREMENT_ROUND_LEVEL });\n    setGrid([]);\n    setTileTrackingArray([]);\n    setMaxTilesTurnt(0);\n    setGameReset(false);\n  }\n\n  function renderSquare(\n    tileTrackingArray: Array<any>,\n    gridSquare: string | boolean | number,\n    y: number,\n    x: number\n  ) {\n    if (tileTrackingArray[y][x] === true) {\n      if (gridSquare === true) return \"bomb\";\n      return gridSquare;\n    }\n    if (tileTrackingArray[y][x] === \"flag\") return \"flag\";\n  }\n  return (\n    <PageContainer>\n      {!optionsSubmitted && (\n        <StartScreen\n          setOptionsSubmitted={setOptionsSubmitted}\n          setStartTime={setStartTime}\n        />\n      )}\n      {optionsSubmitted && (\n        <>\n          <HeaderBar resetGame={resetGame} />\n          <GridContainer>\n            {generatedGrid.map(\n              (row: Array<string | number | boolean>, y: number) => {\n                return (\n                  <GridRow key={uniqid(\"grid-row-\")} height={gridSize}>\n                    {row.map((gridSquare, x) => {\n                      return (\n                        <GridSquare\n                          onClick={(e: React.MouseEvent<HTMLElement>) =>\n                            handleClick(e, y, x, gridSquare)\n                          }\n                          onContextMenu={(e: React.MouseEvent<HTMLElement>) =>\n                            handleRightClick(e, y, x)\n                          }\n                          key={uniqid(\"grid-square-\")}\n                          width={gridSize}\n                          backgroundColour={\n                            tileTrackingArray[y][x] === true\n                              ? themeContext.colour.tileTurnt\n                              : themeContext.colour.tileUnturnt\n                          }\n                          hoverColour={\n                            tileTrackingArray[y][x] === true\n                              ? \"\"\n                              : themeContext.colour.darkHover\n                          }\n                          pointer={\n                            tileTrackingArray[y][x] === true ? \"\" : \"pointer\"\n                          }\n                          renderType={renderSquare(\n                            tileTrackingArray,\n                            gridSquare,\n                            y,\n                            x\n                          )}\n                        ></GridSquare>\n                      );\n                    })}\n                  </GridRow>\n                );\n              }\n            )}\n          </GridContainer>\n        </>\n      )}\n      {gameState === \"win\" && (\n        <InformationModal\n          resetGame={resetGame}\n          resetForNextLevel={resetForNextLevel}\n          type=\"win\"\n          playTime={playTime}\n        />\n      )}\n      {gameState === \"loss\" && (\n        <InformationModal\n          resetGame={resetGame}\n          resetForNextLevel={resetForNextLevel}\n          type=\"loss\"\n          playTime={playTime}\n        />\n      )}\n    </PageContainer>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { FunctionComponent } from \"react\";\nimport { ThemeProvider } from \"styled-components\";\n\nconst theme = {\n  colour: {\n    tileUnturnt: \"#19647E\",\n    tileTurnt: \"#28AFB0\",\n    darkHover: \"#145064\",\n    background: \"#37392E\",\n    mainFont: \"#DDCECD\",\n    secondaryFont: \"#EEE5E5\",\n  },\n  font: {\n    small: \"16px\",\n    medium: \"24px\",\n    large: \"32px\",\n    family: \"HandWritten\",\n    bold: \"ClearBold\",\n  },\n};\n\nconst Theme: FunctionComponent = ({ children }) => (\n  <ThemeProvider theme={theme}>{children}</ThemeProvider>\n);\n\nexport default Theme;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { StateProvider } from \"./globalState\";\nimport Theme from \"./Theme\";\n\nReactDOM.render(\n  <StateProvider>\n    <Theme>\n      <App />\n    </Theme>\n  </StateProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}